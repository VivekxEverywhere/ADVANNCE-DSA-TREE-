Given two Binary Search Trees. Find the nodes that are common in both of them, ie- find the intersection of the two BSTs.

Note: Return the common nodes in sorted order.

Examples:

Input:
BST1:
                  5
               /     \
             1        10
           /   \      /
          0     4    7
                      \
                       9
BST2:
                10 
              /    \
             7     20
           /   \ 
          4     9

Output: 4 7 9 10

Input:
BST1:
     10
    /  \
   2   11
  /  \
 1   3
BST2:
       2
     /  \
    1    3
Output: 1 2 3
Constraints:
1 <= Number of Nodes <= 105
1 <= Node data <= 109




class Solution {
    public static ArrayList<Integer> findCommon(Node r1, Node r2) {
        ArrayList<Integer> res = new ArrayList<>();
        if (r1 == null || r2 == null) return res;

        Stack<Node> s1 = new Stack<>();
        Stack<Node> s2 = new Stack<>();

        Node a = r1;
        Node b = r2;

        while ((a != null || !s1.isEmpty()) && (b != null || !s2.isEmpty())) {
            while (a != null) {
                s1.push(a);
                a = a.left;
            }
            while (b != null) {
                s2.push(b);
                b = b.left;
            }

            if (s1.isEmpty() || s2.isEmpty()) break;

            Node top1 = s1.peek();
            Node top2 = s2.peek();

            if (top1.data == top2.data) {
                res.add(top1.data);
                s1.pop();
                s2.pop();
                a = top1.right;
                b = top2.right;
            } else if (top1.data < top2.data) {
                s1.pop();
                a = top1.right;
            } else {
                s2.pop();
                b = top2.right;
            }
        }

        return res;
    }
}
